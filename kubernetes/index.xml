<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on bits-pieces</title><link>https://l10178.github.io/bits-pieces/kubernetes/</link><description>Recent content in Kubernetes on bits-pieces</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 29 Jan 2021 23:54:37 +0800</lastBuildDate><atom:link href="https://l10178.github.io/bits-pieces/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>容器进程数限制</title><link>https://l10178.github.io/bits-pieces/kubernetes/pid/</link><pubDate>Sat, 01 Jul 2023 23:54:37 +0800</pubDate><guid>https://l10178.github.io/bits-pieces/kubernetes/pid/</guid><description>问题描述：
一个 Java 应用跑在 K8S 容器内，Pod 内只有 Java 这一个进程。应用跑了一段时间后，开始出现以下错误。
Exception in thread &amp;#34;slow-fetch-15&amp;#34; java.lang.OutOfMemoryError: unable to create new native thread 428 at java.lang.Thread.start0(Native Method) 429 at java.lang.Thread.start(Thread.java:719) 430 at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:957) 431 at java.util.concurrent.ThreadPoolExecutor.processWorkerExit(ThreadPoolExecutor.java:1025) 432 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) 433 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 进入 Pod 内，尝试执行任何操作，又会出现 unable to start container process 错误。
一开始怀疑是内存不足，调大了内存，同时也缩小了 Java 的 xss， 都不起作用。
真实原因： K8S 容器限制了 PID 数，无法创建新的线程，在 Pod 内 cat /sys/fs/cgroup/pids/pids.max 发现是 1024。
关于 K8S pod pid limit， 可参考此资料: https://kubernetes.</description></item><item><title>Envoy生产配置最佳实践</title><link>https://l10178.github.io/bits-pieces/kubernetes/envoy/</link><pubDate>Wed, 15 Feb 2023 21:54:37 +0800</pubDate><guid>https://l10178.github.io/bits-pieces/kubernetes/envoy/</guid><description>Envoy 监控指标 Envoy 将其指标分为以下主要类别：
Downstream：与进入代理的连接和请求相关的指标。它们由 listener、HTTP connection manager(HCM)、TCP proxy filter 等产生。 Upstream：与传出连接和代理发出的请求相关的指标。它们由 connection pool、router filter、tcp proxy filter 等产生。 Server：描述 Envoy 内部状态的指标。其中包括正常运行时间或分配的内存等指标。 Envoy 发出三种指标数据类型：
Counter(Counters)：无符号整数，只会增加而不会减少。例如，总请求。 仪表(Gauges)：增加和减少的无符号整数。例如，当前活动的请求。 Histograms(Histograms)：作为指标流的一部分的无符号整数，然后由收集器聚合以最终产生汇总的百分位值(percentile，即平常说的 P99/P50/Pxx)。例如，Upsteam 响应时间。 在 Envoy 的内部实现中，Counters 和 Gauges 被分批并定期刷新以提高性能，Histograms 在接收时写入。
从指标的产出地点来划分，可以分为：
cluster manager: 面向 upstream 的 L3/L4/L7 层指标。 http connection manager(HCM)： 面向 upstream &amp;amp; downstream 的 L7 层指标。 listeners: 面向 downstream 的 L3/L4 层指标。 server：全局。 Envoy 通过 admin 端口放开了 prometheus 格式的监控指标，可以通过 admin 接口快速查看当前已支持的指标：http://127.0.0.1:9901/stats/prometheus，其中 9901 是 admin 端口。</description></item><item><title>备考 CKA 过程，CKA 真题</title><link>https://l10178.github.io/bits-pieces/kubernetes/cka/</link><pubDate>Tue, 01 Jun 2021 23:54:37 +0800</pubDate><guid>https://l10178.github.io/bits-pieces/kubernetes/cka/</guid><description>备考 CKA （Certified Kubernetes Administrator）过程，心得，遇见问题，CKA 真题。
备考环境 备考使用的系统和软件版本如下。
Ubuntu：20.04 Focal Fossa Kubernetes：1.20.7 kubeadm：1.20.7 安装和使用问题记录 kubeadm 安装问题 安装 kubeadm，国内安装使用阿里镜像源。
$ cat /etc/apt/sources.list.d/kubernetes.list deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main 踩坑：因为使用的是 ubuntu 20.04，代号 focal，专门去各个代理镜像源找kubernetes-focal都没有找到，后来发现 google 官方根本没发布对应的版本，只有kubernetes-xenial， k8s 官方文档里 ubuntu 也是用的这一个版本。可以用，就用他吧。
kubeadm init 时指定使用阿里镜像源（解决国内连不上 k8s.gcr.io 的问题）、指定版本号(安装考试对应的版本，不一定是最新版本)。
通过指定--image-repository，不需要手动下载镜像重新打 tag，kubeadm 自动使用指定的 repository。
kubeadm init --image-repository=registry.aliyuncs.com/google_containers \ --pod-network-cidr=10.244.0.0/16 \ --kubernetes-version=v1.20.7 解决 scheduler Unhealthy，controller-manager Unhealthy 第一次安装完成后通过 kubectl get cs命令，发现 scheduler Unhealthy，controller-manager Unhealthy。
$ kubectl get cs NAME STATUS MESSAGE scheduler Unhealthy Get &amp;#34;http://127.</description></item><item><title>TL;DR</title><link>https://l10178.github.io/bits-pieces/kubernetes/tldr/</link><pubDate>Fri, 29 Jan 2021 23:54:37 +0800</pubDate><guid>https://l10178.github.io/bits-pieces/kubernetes/tldr/</guid><description>复制&amp;ndash;粘贴，这就是生活。
复制 secret 到另一个 namespace。
kubectl get secret mys --namespace=na -oyaml | grep -v &amp;#39;^\s*namespace:\s&amp;#39; | kubectl apply --namespace=nb -f - 批量删除 pod。
kubectl get pods --all-namespaces | grep Evicted | awk &amp;#39;{print $2 &amp;#34; --namespace=&amp;#34; $1}&amp;#39; | xargs kubectl delete pod # Delete by label kubectl delete pod -n idaas-book -l app.kubernetes.io/name=idaas-book 密钥解密。
kubectl get secret my-creds -n mysql -o jsonpath=&amp;#34;{.data.ADMIN_PASSWORD}&amp;#34; | base64 --decode Docker 保存和导入镜像。
# save image(s) docker save image:tag image2:tag | gzip &amp;gt;xxx.</description></item></channel></rss>